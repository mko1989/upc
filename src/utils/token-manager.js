const fs = require('fs');
const path = require('path');
const { v4: uuidv4 } = require('uuid');
const { app } = require('electron');

class TokenManager {
  constructor() {
    this.configPath = path.join(app.getPath('userData'), 'upc-config.json');
    this.defaultConfig = {
      authToken: null,
      firstRun: true,
      tokenGeneratedAt: null
    };
  }

  loadConfig() {
    try {
      if (fs.existsSync(this.configPath)) {
        const configData = fs.readFileSync(this.configPath, 'utf8');
        return { ...this.defaultConfig, ...JSON.parse(configData) };
      }
    } catch (error) {
      console.error('Error loading config:', error);
    }
    return { ...this.defaultConfig };
  }

  saveConfig(config) {
    try {
      // Ensure the userData directory exists
      const userDataPath = app.getPath('userData');
      if (!fs.existsSync(userDataPath)) {
        fs.mkdirSync(userDataPath, { recursive: true });
      }

      fs.writeFileSync(this.configPath, JSON.stringify(config, null, 2));
      return true;
    } catch (error) {
      console.error('Error saving config:', error);
      return false;
    }
  }

  generateNewToken() {
    return uuidv4().substring(0, 8);
  }

  getOrCreateToken() {
    const config = this.loadConfig();

    // If first run or no token exists, generate one
    if (config.firstRun || !config.authToken) {
      console.log('🔑 First run detected - generating new auth token');
      config.authToken = this.generateNewToken();
      config.firstRun = false;
      config.tokenGeneratedAt = new Date().toISOString();
      
      this.saveConfig(config);
      
      console.log('💾 Auth token saved persistently');
      console.log(`🔐 Your auth token: ${config.authToken}`);
      console.log('💡 This token will persist between app restarts');
      console.log('🔄 Use the tray menu "Regenerate Token" to create a new one');
      
      return config.authToken;
    }

    // Load existing token
    console.log('🔑 Loading existing auth token');
    console.log(`🔐 Your auth token: ${config.authToken}`);
    console.log(`📅 Generated: ${new Date(config.tokenGeneratedAt).toLocaleString()}`);
    console.log('💡 This token persists between restarts');
    
    return config.authToken;
  }

  regenerateToken() {
    const config = this.loadConfig();
    const oldToken = config.authToken;
    
    config.authToken = this.generateNewToken();
    config.tokenGeneratedAt = new Date().toISOString();
    
    this.saveConfig(config);
    
    console.log('🔄 Auth token regenerated by user request');
    console.log(`🔐 Old token: ${oldToken}`);
    console.log(`🔐 New token: ${config.authToken}`);
    console.log('⚠️  Update your Companion configuration with the new token!');
    
    return config.authToken;
  }

  getCurrentToken() {
    const config = this.loadConfig();
    return config.authToken;
  }

  getTokenInfo() {
    const config = this.loadConfig();
    return {
      token: config.authToken,
      generatedAt: config.tokenGeneratedAt,
      isFirstRun: config.firstRun
    };
  }

  resetToFirstRun() {
    // For development/testing - reset to first run state
    const config = this.loadConfig();
    config.firstRun = true;
    config.authToken = null;
    config.tokenGeneratedAt = null;
    this.saveConfig(config);
    console.log('🔄 Reset to first run state');
  }
}

module.exports = TokenManager;
